print('Hello world')
import numpy as nu
trainingSet[, 2:3] = scale(trainingSet[, 2:3])
# DATA PREPROCESSING
# IMPORT DATA SET
dataset = read.csv('Data.csv')
# dataset = dataset[, 2:3]
# #Splitting the dataset into training set and test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
trainingSet = subset(dataset, split == TRUE)
testSet = subset(dataset, split == FALSE)
# # Feature Scaling
trainingSet[, 2:3] = scale(trainingSet[, 2:3])
# testSet[, 2:3] = scale(testSet[, 2:3])
setwd("C:/Machine Learning/Part 2 - Regression/Section 5 - Multiple Linear Regression/Multiple_Linear_Regression")
# DATA PREPROCESSING
# IMPORT DATA SET
dataset = read.csv('50_Startups.csv')
# Encode categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1,2,3))
# Splitting the dataset into training set and test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
trainingSet = subset(dataset, split == TRUE)
testSet = subset(dataset, split == FALSE)
# # Feature Scaling - !!Simple linear regression does not need feature scaling!!
# # For this case we do not need feature scaling, the library will do it to us
# trainingSet[, 2:3] = scale(trainingSet[, 2:3])
# testSet[, 2:3] = scale(testSet[, 2:3])
# # Fitting Multiple !Linear combination! Regression to the Training set as a
# regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State)
# # To represent the formula aboce faster use the expression below
regressor = lm(formula = Profit ~ .,
data = trainingSet)
# Predicting the Test set results
yPred = predict(regressor,
newdata = testSet)
# Build an optimal model using Backward Elimination algorithym
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
# # Visualizing the Training set results
# install.packages("ggplot2")
# library(ggplot2)
#
# ggplot() +
#   geom_point(aes(x = trainingSet$YearsExperience, y = trainingSet$Salary),
#              colour = 'red') +
#   geom_line(aes(x = trainingSet$YearsExperience, y = predict(regressor, newdata = trainingSet)),
#             colour = 'blue') +
#   ggtitle('Salary vs Experience(Training Set)') +
#   xlab('Years of Experience') +
#   ylab('Salary')
#
#
# # Visualizing the Test set results
# # install.packages("ggplot2")
# # library(ggplot2)
#
# ggplot() +
#   geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
#              color = 'gold') +
#   geom_line(aes(x = trainingSet$YearsExperience, y = predict(regressor, newdata = trainingSet)),
#             color = 'black',
#             size = 1,
#             alpha = 1) +
#   ggtitle('Salary vs Experience(Test Set)') +
#   xlab('Years of Experience') +
#   ylab('Salary')
summary(regressor)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x = trainingSet$Profit, y = trainingSet$R.D.Spend),
colour = 'red') +
geom_line(aes(x = trainingSet$Profit, y = predict(regressor, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary vs Experience(Training Set)') +
xlab('Investment') +
ylab('Profit')
regressor = lm(formula = Profit ~ R.D.Spend,
data = trainingSet)
summary(regressor)
# Visualizing the Training set results
install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x = trainingSet$Profit, y = trainingSet$R.D.Spend),
colour = 'red') +
geom_line(aes(x = trainingSet$Profit, y = predict(regressor, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary vs Experience(Training Set)') +
xlab('Investment') +
ylab('Profit')
install.packages("ggplot2")
install.packages("ggplot2")
