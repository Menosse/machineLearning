# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Simple Linear Regression
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
trainingSet = subset(dataset, split == TRUE)
testSet = subset(dataset, split == FALSE)
# Feature Scaling is not necessary for SIMPLE LINEAR regression
# trainingSet = scale(trainingSet)
# testSet = scale(testSet)
# Fitting Simple Linear Regression to the Training set
regressor = lm(formula = Salary ~ YearsExperience,
data = trainingSet)
# Predicting the Test set results
yPred = predict(regressor, newdata = testSet)
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = trainingSet$YearsExperience, y = trainingSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(regressor, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(regressor, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of experience') +
ylab('Salary')
setwd("~/Documents/machineLearning/Part 02 - Regression/Section 04 - Simple Linear Regression")
setwd("~/Documents/machineLearning/Part 02 - Regression/Section 04 - Simple Linear Regression")
setwd("~/Documents/machineLearning/Part 02 - Regression/Section 04 - Simple Linear Regression")
# Importing the dataset
datasets = read.csv("Salary_Data.csv")
# Importing the dataset
dataset = read.csv("Salary_Data.csv")
# Splitting the dataset into the Training set and Test set
library(cartool)
# Splitting the dataset into the Training set and Test set
library(cartools)
# Splitting the dataset into the Training set and Test set
library(carTools)
# Splitting the dataset into the Training set and Test set
library(caTools)
library(caTools)
set.seed(123)
split = sample.split(dataset, SplitRatio = 2/3)
trainingSet = subset(dataset, split == TRUE)
testSet = subset(dataset, split == FALSE)
View(testSet)
View(testSet)
View(trainingSet)
View(testSet)
View(trainingSet)
View(dataset)
View(trainingSet)
# Fitting Simple Linear Regression to the Training set
linReg = lm(formula = Salary ~ YearsExperience,
datas = trainingSet)
# Fitting Simple Linear Regression to the Training set
linReg = lm(formula = Salary ~ YearsExperience,
datas = trainingSet)
View(trainingSet)
# Simple Linear Regression
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
trainingSet = subset(dataset, split == TRUE)
testSet = subset(dataset, split == FALSE)
# Feature Scaling is not necessary for SIMPLE LINEAR regression
# trainingSet = scale(trainingSet)
# testSet = scale(testSet)
# Fitting Simple Linear Regression to the Training set
regressor = lm(formula = Salary ~ YearsExperience,
data = trainingSet)
# Importing the dataset
dataset = read.csv("Salary_Data.csv")
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset, SplitRatio = 2/3)
trainingSet = subset(dataset, split == TRUE)
testSet = subset(dataset, split == FALSE)
# Fitting Simple Linear Regression to the Training set
linReg = lm(formula = Salary ~ YearsExperience,
datas = trainingSet)
linReg = lm(formula = Salary ~ YearsExperience,
datas = trainingSet)
regressor = lm(formula = Salary ~ YearsExperience,
data = trainingSet)
# Importing the dataset
dataset = read.csv("Salary_Data.csv")
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset, SplitRatio = 2/3)
trainingSet = subset(dataset, split == TRUE)
testSet = subset(dataset, split == FALSE)
# Fitting Simple Linear Regression to the Training set
linReg = lm(formula = Salary ~ YearsExperience,
datas = trainingSet)
# Fitting Simple Linear Regression to the Training set
linReg = lm(formula = Salary ~ YearsExperience,
data = trainingSet)
# Predicting the Test set results
yPred = predict(linReg, newdata = testSet)
library(ggplot2)
# Predicting the Test set results
yPred = predict(linReg, newdata = testSet)
# Visualising the Training set results
library(ggplot2)
ggplot()+
geom_point(aes(x = trainingSet$YearsExperience, y = trainingSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary x Years of experience') +
xlab('Years of experience') +
ylab('Salary')
# Visualising the Test set results
ggplot()+
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = yPred),
colour = 'blue') +
ggtitle('Salary x Years of expecience (Test set)') +
xlab('Years of expecience') +
ylab('Salary')
ggplot()+
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet),
colour = 'blue') +
ggtitle('Salary x Years of expecience (Test set)') +
xlab('Years of expecience') +
ylab('Salary')
# Visualising the Training set results
ggplot()+
geom_point(aes(x = trainingSet$YearsExperience, y = trainingSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary x Years of experience') +
xlab('Years of experience') +
ylab('Salary')
library(ggplot2)
ggplot()+
geom_point(aes(x = trainingSet$YearsExperience, y = trainingSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary x Years of experience') +
xlab('Years of experience') +
ylab('Salary')
ggplot()+
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet),
colour = 'blue') +
ggtitle('Salary x Years of expecience (Test set)') +
xlab('Years of expecience') +
ylab('Salary')
ggplot()+
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet),
colour = 'blue') +
ggtitle('Salary x Years of expecience (Test set)') +
xlab('Years of expecience') +
ylab('Salary')
# Visualising the Test set results
ggplot()+
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet),
colour = 'blue') +
ggtitle('Salary x Years of expecience (Test set)') +
xlab('Years of expecience') +
ylab('Salary')
ggplot()+
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet),
colour = 'blue') +
ggtitle('Salary x Years of expecience (Test set)') +
xlab('Years of expecience') +
ylab('Salary')
ggplot()+
geom_point(aes(x = trainingSet$YearsExperience, y = trainingSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary x Years of experience(Training Set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot()+
geom_point(aes(x = trainingSet$YearsExperience, y = trainingSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary x Years of experience(Training Set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot()+
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary x Years of expecience (Test set)') +
xlab('Years of expecience') +
ylab('Salary')
# Visualising the Test set results
ggplot()+
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'red') +
geom_line(aes(x = testSet$YearsExperience, y = predict(linReg, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary x Years of expecience (Test set)') +
xlab('Years of expecience') +
ylab('Salary')
# Visualising the Test set results
ggplot()+
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet)),
colour = 'blue') +
ggtitle('Salary x Years of expecience (Test set)') +
xlab('Years of expecience') +
ylab('Salary')
setwd("~/Documents/machineLearning/Part 02 - Regression/Section 04 - Simple Linear Regression")
""clear
cls
clear
# Importing the dataset
dataSet = read.csv("Salary_Data.csv")
View(dataSet)
linReg = lm(formula = Salary ~ YearsExperience,
data = trainingSet)
# Splitting the dataset into the Training set and Test set
set.seed(123)
split = sample.split(dataSet$Salary, SplitRatio = 2/3)
trainingSet = subset(dataSet, split == TRUE)
testSet = subset(dataset, split == FALSE)
linReg = lm(formula = Salary ~ YearsExperience,
data = trainingSet)
# Predicting the Test set results
yPred = predict(linReg, newdata = dataSet)
#Importing plot Library
library(ggplot2)
# Visualising the Training set results
ggplot()+
geom_point(aes(x = trainingSet$YearsExperience, y = trainingSet$Salary),
colour = 'red')
# Visualising the Training set results
ggplot()+
ggtitle('Salary x Experience (TrainingSet)') +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = trainingSet$YearsExperience, y = trainingSet$Salary),
colour = 'red')
# Visualising the Training set results
ggplot()+
ggtitle('Salary x Experience (TrainingSet)') +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = trainingSet$YearsExperience, y = trainingSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet)))
# Visualising the Training set results
ggplot()+
ggtitle('Salary x Experience (TrainingSet)') +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = trainingSet$YearsExperience, y = trainingSet$Salary),
colour = 'red') +
geom_line(aes(x = trainingSet$YearsExperience, y = predict(linReg, newdata = trainingSet)),
colour = 'blue')
# Visualising the Test set results
ggplot()+
ggtitle('Salary x Experience (Test Set)') +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'Yellow')
# Splitting the dataset into the Training set and Test set
set.seed(123)
split = sample.split(dataSet$Salary, SplitRatio = 2/3)
trainingSet = subset(dataSet, split == TRUE)
testSet = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
set.seed(123)
split = sample.split(dataSet$Salary, SplitRatio = 2/3)
trainingSet = subset(dataSet, split == TRUE)
testSet = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
set.seed(123)
split = sample.split(dataSet$Salary, SplitRatio = 2/3)
trainingSet = subset(dataSet, split == TRUE)
testSet = subset(dataSet, split == FALSE)
# Visualising the Test set results
ggplot()+
ggtitle('Salary x Experience (Test Set)') +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'Yellow')
# Visualising the Test set results
ggplot()+
ggtitle('Salary x Experience (Test Set)') +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'Orange')
# Visualising the Test set results
ggplot()+
ggtitle('Salary x Experience (Test Set)') +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'Orange') +
geom_line(aes(x = testSet$YearsExperience, y = predict(linReg, newdata = testSet)),
colour = 'Green')
# Importing the dataset
newDataSet = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
set.seed(123)
split = sample.split(newDataSet, SplitRatio = 2/3)
trainSet = subset(newDataSet, split == TRUE)
testSet = subset(newDataSet, split == FALSE)
# Fitting Simple Linear Regression to the Training set
linReg = lm(formula = YearsExperience ~ Salary,
data = trainSet)
# Predicting the Test set results
yPred = predict(linReg, newdata = testSet)
#Importing plot Library
library(ggplot2)
#Importing plot Library
library(ggplot2)
# Visualising the Training set results
ggplot()+
ggtitle("Salary x Experience (Training Set)") +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = YearsEx
#Importing plot Library
library(ggplot2)
# Visualising the Training set results
ggplot()+
ggtitle("Salary x Experience (Training Set)") +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = YearsExperience, y = Salary , data = trainSet),
colour = 'red')
#Importing plot Library
library(ggplot2)
# Visualising the Training set results
ggplot()+
ggtitle("Salary x Experience (Training Set)") +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = trainSet$YearsExperience, y = trainSet$Salary),
colour = 'red')
# Visualising the Training set results
ggplot()+
ggtitle("Salary x Experience (Training Set)") +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = trainSet$YearsExperience, y = trainSet$Salary),
colour = 'red') +
geom_line(aes(x = trainSet$YearsExperience, y = predict(linReg, newdata = trainSet)),
colour = 'blue')
# Fitting Simple Linear Regression to the Training set
linReg = lm(formula = Salary ~ YearsExperience,
data = trainSet)
# Visualising the Training set results
ggplot()+
ggtitle("Salary x Experience (Training Set)") +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = trainSet$YearsExperience, y = trainSet$Salary),
colour = 'red') +
geom_line(aes(x = trainSet$YearsExperience, y = predict(linReg, newdata = trainSet)),
colour = 'blue')
# Visualising the Test set results
ggplot()+
ggtitle("Salary x Experience (Training Set)") +
xlab('Experience') +
ylab('Salary') +
geom_point(aes(x = testSet$YearsExperience, y = testSet$Salary),
colour = 'blue') +
geom_line(aes(x = testSet$YearsExperience, y = predict(linReg, newdata = testSet)),
colour = 'red')
setwd("~/Documents/machineLearning/Part 02 - Regression/Section 05 - Multiple Linear Regression/Multiple_Linear_Regression")
# IMPORT DATA SET
dataset = read.csv('50_Startups.csv')
# Encode categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1,2,3))
View(dataset)
# Splitting the dataset into training set and test set
library(caTools)
set.seed(123)
View(dataset)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
trainingSet = subset(dataset, split == TRUE)
testSet = subset(dataset, split == FALSE)
View(trainingSet)
View(testSet)
# # To represent the formula faster use the expression below
regressor = lm(formula = Profit ~ .,
data = trainingSet)
# Predicting the Test set results
yPred = predict(regressor,
newdata = testSet)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
setwd("~/Documents/machineLearning/Part 02 - Regression/Section 07 - Support Vector Regression (SVR)/SVR")
# Importing dataset
SVRdataSet = read.csv("Position_Salaries.csv")
View(SVRdataSet)
setwd("~/Documents/machineLearning/Part 02 - Regression/Section 07 - Support Vector Regression (SVR)/SVR")
